int height(node *p){
	return p?p->height:0;
}

int bFactor(node *p){
	return height(p->right) - height(p->left);
}

void fixHeight(node *p){
	int hr = heght(p->right);
	int hl = heght(p->left);
	p->height = (hl > hr ? hl : hr) + 1;
}

node *rotateRight(node *p){
	node *q = p->left;
	p->left = q->right;
	q->right = p;
	fixHeight(p);
	fixHeight(q);
	return q;
}

node *rotateLeft(node *p){
	node *q = p->right;
	p->right = q->left;
	q->left = p;
	fixHeight(p);
	fixHeight(q);
	return q;
}

node *balance(node *p){
	fixHeight(p);
	if(bFactor(p) == 2){
		if(bFactor(p->right < 0))
			p->right = rotateRight(p->right);
		rotateLeft(p);
	}
	if (bFactor(p) == -2){
		if (bFactor(p->left) > 0){
			p->left = rotateLeft(p->left);
		return rotateRight(p);
	}
	return p;
}

node * insert(node *p, int k){
	if (!p) return new node(k);
	if(k < p->key)
		p->left = insert(p->left, k);
	else 
		p->right = insert(p->right, k);
	return balance(p);
}

node *findmin(node *p){
	return p->left ? findmin(p->left) : p;
}

node *removemin(node *p){
	if (p->left == 0)
		return p->right;
	p->left = removemin(p->left);
	return balance(p);
}

node* remove(node* p, int k){
	if(!p) return 0;
	if(k < p->key)
		p->left = remove(p->left, k);
	else if (k > p->key)
		p->right = remove(p->right,k);
	else{
		node *q = p->left;
		node *r = p->right;
		delete p;
		if(!r) return q;
		node *min = findmin(r);
		min->right = removemin(r);
		min->left = q;
		return balance(min);
	}
	return balance(p);
}
		
	