node* grandParent(node* n){
	if((n != Null) && (n->parent != Null))
		return n->parent->parent;
	else
		return Null;
}

node* uncle(node* n){
	node* g = grandParent(n);
	if (g == NULL)
		return Null
	if (n->parent == g->left)
		return g->right
	else 
		return g->left
}

void insert_case1(node* n){
	if (n->parent = NULL)
		n->color = BLACK;
	else	
		insert_case2(n)
}

void insert_case2(node* n){
	if(n->parent->color == BLACK)
		return;
	else insert_case3(n)
}

void inset_case3(node* n){
	node* u = uncle(n)
	if(u != Null && u->color == RED){
		n->parent->color = BLACK
		u->color = BLACK
		node* g = grandParent(n)
		g->color = RED
		insert_case1(g)
	} else {
		insert_case4(n)
	}
}

void insert_case4(node* n){
	node* g = grandParent(n)
	if(( n == n->parent->right) && (n->parent == g->left)){
		rotateleft(n->parent)
		n = n->left
	}else if((n == n->parent->left) && n->parent == g->right)){
		rotateright(n->parent)
		n = n->right
	}
	insert_case5(n)
}

void insert_case5(node* n){
	node* g = grandParent(n)
	n->parent->color = BLACK
	g->color = RED
	if ((n == n->parent->left) && (n->parent == g->left))
		rotateright(g)
	else 
		rotateleft(g)
}

node* sibling(node* n){
	if (n == n->parent->left)
		return n->parent->right
	else 
		return n->parent->left
}

void replace_child(node* n, node* child){
	child->parent = n->parent
	if (n == n->parent->left)
		n->parent->left = child
	else n->parent->right = child
}

void delete_one_child(node* n){
	node* child = is_leaf(n->right) ? n->left : n->right
	replace_child(n, child)
	if ( n->color == BLACK){
		if(child->color == RED){
			child->color = BLACK
		}else 
	}		{delete_case2(child)}
	free(n)
}

void delete_case2(node* n){
	node* s = sibling(n)
	if(s->color == RED){
		n->parent->color = RED
		s->color = BLACK
		if(n == n->parent->left)
			rotateleft(n->parent)
		else	
			rotateright(n->parent)
	}
	delete_case3(n)
}

void delete_case3(node* n){
	node* s = sibling(n)
	if(
		(n->parent->color == BLACK) &&
		(s->color == BLACK) &&
		(s->left->color == BLACK) &&
		(s->right->color == BLACK)
	){
		s->color = RED
		delete_case2(n->parent)
	}else 
		delete_case4(n)
}

void delete_case4(node* n){
	node* s = sibling(n)
	if(
		(n->parent->color == RED) &&
		(s->color = BLACK) &&
		(s-left->color == BLACK) && 
		(s->right->color == BLACK)
	){
		s->color = RED
		n->parent->color = BLACK
	}else delete_case5(n)
}

void delete_case5(node* n){
	node* s = sibling(n)
	if (s->color == BLACK){
		if (
			(n == n->parent->left) &&
			(s->right->color = BLACK) && 
			(s ->left->color == RED)
		){
			s->color = RED
			s->left->color = BLACK
			rotateright(s)
		}else if(
			(n == n->parent->right) &&
			(s->left->color == BLACK) &&
			(s->right->color == RED)
		){
			s->color = RED
			s->right->color = BLACK
			rotateleft(s)
		}
	}
	delete_case6(n)
}


void delete_case6(node* n){
	node* s = sibling(n)
	s->color = n->parent->color
	n->parent->color = BLACK
	
	if( n == n->parent->left){
		s->right->color = BLACK
		rotateleft(n->parent)
	} else{
		s->left->color = BLACK
		rotateright(n->parent)
	}
}
			

		
		

